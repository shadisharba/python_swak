[
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "Deck",
    "section": "",
    "text": "source",
    "crumbs": [
      "Deck"
    ]
  },
  {
    "objectID": "deck.html#drawing-cards-with-replacement",
    "href": "deck.html#drawing-cards-with-replacement",
    "title": "Deck",
    "section": "Drawing Cards With Replacement",
    "text": "Drawing Cards With Replacement\nLet’s try something fun with our deck of cards, drawing a card with replacement:\n\nsource\n\ndraw_n\n\n draw_n (n:int, replace:bool=True)\n\nDraw n cards, with replacement iif replace\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nn\nint\n\nnumber of cards to draw\n\n\nreplace\nbool\nTrue\nwhether or not draw with replacement\n\n\n\n\nsample = draw_n(10)\nsample\n\n[Q♣️, J♠️, 6♣️, 7♦️, 3♠️, 7♦️, 7♣️, 5♠️, 4♠️, 6♣️]",
    "crumbs": [
      "Deck"
    ]
  },
  {
    "objectID": "deck.html#visualizing-the-results",
    "href": "deck.html#visualizing-the-results",
    "title": "Deck",
    "section": "Visualizing the results",
    "text": "Visualizing the results\nThis isn’t terribly interesting from a statistical perspective. However, its an example of how you can include visualizations in your nbdev projects!\n\n\n\n\n\n\nNote\n\n\n\nNotice how we are hiding just the input with #|echo: false, so readers can see the output but hide the code. You can also fold the code using the #|code-fold: true directive.\n\n\n\n\nUnable to display output for mime type(s): application/vnd.plotly.v1+json",
    "crumbs": [
      "Deck"
    ]
  },
  {
    "objectID": "deck.html#create-a-cli-advanced",
    "href": "deck.html#create-a-cli-advanced",
    "title": "Deck",
    "section": "Create a CLI (Advanced)",
    "text": "Create a CLI (Advanced)\nWe can create a CLI with @call parse\n\nsource\n\ndraw_cards\n\n draw_cards (n:int, replace:bool=True, outfile:str=None)\n\nDraw n cards optionally with replacement\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nn\nint\n\nnumber of cards to draw\n\n\nreplace\nbool\nTrue\nwhether or not draw with replacement\n\n\noutfile\nstr\nNone\noutput file, defaults to stdout\n\n\n\n\n\n\n\n\n\nTip\n\n\n\nWe normally wouldn’t repeat all of these arguments when one function is wrapping another one. Instead, we would use delegates. However, we wanted to keep this tutorial simple, so we didn’t use that here.\n\n\n\nfname = 'sample.txt'\ndraw_cards(10, outfile=None)\n# print(Path(fname).read_text(encoding=\"utf8\"))\n\n4❤️\nA❤️\n4❤️\n5❤️\nQ♠️\n10♦️\n9❤️\n4♣️\nK❤️\nJ♣️",
    "crumbs": [
      "Deck"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "python_swak",
    "section": "",
    "text": "This file will become your README and also the index of your documentation.",
    "crumbs": [
      "[python_swak](https://shadisharba.github.io/python_swak/)"
    ]
  },
  {
    "objectID": "index.html#developer-guide",
    "href": "index.html#developer-guide",
    "title": "python_swak",
    "section": "Developer Guide",
    "text": "Developer Guide\nIf you are new to using nbdev here are some useful pointers to get you started.\n\nInstall python_swak in Development mode\n# make sure python_swak package is installed in development mode\n$ pip install -e .\n\n# make changes under nbs/ directory\n# ...\n\n# compile to have changes apply to python_swak\n$ nbdev_prepare",
    "crumbs": [
      "[python_swak](https://shadisharba.github.io/python_swak/)"
    ]
  },
  {
    "objectID": "index.html#usage",
    "href": "index.html#usage",
    "title": "python_swak",
    "section": "Usage",
    "text": "Usage\n\nInstallation\nInstall latest from the GitHub repository:\n$ pip install git+https://github.com/shadisharba/python_swak.git\nor from conda\n$ conda install -c shadisharba python_swak\nor from pypi\n$ pip install python_swak\n\n\nDocumentation\nDocumentation can be found hosted on this GitHub repository’s pages. Additionally you can find package manager specific guidelines on conda and pypi respectively.",
    "crumbs": [
      "[python_swak](https://shadisharba.github.io/python_swak/)"
    ]
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "python_swak",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\n1+1\n\n2\n\n\n\nHow to start a new nbdev project\ngit clone &lt;link_to_an_almost_empty_repo_with_one_commit&gt;\ncd &lt;repo_name&gt;\nnbdev_new # does things including nbdev_install_hooks\nnbdev_prepare # Export, test, and clean notebooks, and render README if needed\nnbdev_preview # Preview the documentation locally\n\n\nDeck of Cards\nThe draw_cards cli: a handy cli you can use to draw cards as well!\n\n!draw_cards -h\n\nusage: draw_cards [-h] [--replace] [--outfile OUTFILE] n\n\nDraw `n` cards optionally with replacement\n\npositional arguments:\n  n                  number of cards to draw\n\noptions:\n  -h, --help         show this help message and exit\n  --replace          whether or not draw with replacement (default: False)\n  --outfile OUTFILE  output file, defaults to stdout\n\n\n\n!draw_cards 10\n\nA♣️\nK♣️\nJ❤️\n4♦️\nQ❤️\n6♠️\n5♠️\n2❤️\n5♦️\nQ♣️",
    "crumbs": [
      "[python_swak](https://shadisharba.github.io/python_swak/)"
    ]
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "source\n\nfoo\n\n foo ()",
    "crumbs": [
      "core"
    ]
  },
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "Card",
    "section": "",
    "text": "source\n\nCard\n\n Card (suit=0, rank=2)\n\nRepresents a standard playing card.\n\n\nCreating Cards\nCard is a class that represents a single card in a deck of cards. We can create cards like this:\n\nc = Card(suit=1, rank=3)\nc\n\n3♦️\n\n\nIn these docs we’ll generally show the expected output from our code like so:\n\ntest_eq(str(c), '3♦️')\n\n\nc2 = Card(suit=2, rank=11)\ntest_eq(str(c2), 'J❤️')\n\n\n\n\n\n\n\nTip\n\n\n\nThese test_eq statements are not just documentation, they are also unit tests! These cells will get tested automatically with continous integration. You can also run tests locally with the command nbdev_test. If you do not want to show a test in your docs, you can choose to hide cells with the #|hide directive.\n\n\n\n\nComparing Cards\nYou can also compare cards like so:\n\ntest_eq(c2 &gt; c, True)",
    "crumbs": [
      "Card"
    ]
  }
]