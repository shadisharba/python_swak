"""Playing Cards"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/02_deck.ipynb.

# %% auto 0
__all__ = ['Deck', 'Hand', 'move_cards', 'draw_n', 'draw_cards']

# %% ../nbs/02_deck.ipynb 3
from .card import *
from fastcore.basics import *
from fastcore.test import *
import random

# %% ../nbs/02_deck.ipynb 4
class Deck:
    "Represents a deck of cards"
    def __init__(self): self.cards = [Card(s, r) for s in range(4) for r in range(1, 14)]
    def __str__(self): return '; '.join(map(str, self.cards))
    def __len__(self): return len(self.cards)
    def __contains__(self, card): return card in self.cards
    __repr__ = __str__
    
    def add(self,
            card:Card): # Card to add
        "Adds `card` to the deck"
        self.cards.append(card)

    def remove(self,
               card:Card): # Card to remove
        "Removes `card` from the deck or raises exception if it is not there"
        self.cards.remove(card)

    def shuffle(self):
        "Shuffles the cards in this deck"
        random.shuffle(self.cards)

# %% ../nbs/02_deck.ipynb 9
@patch
def pop(self:Deck,
        index=-1): # Card number to pop
    "Removes and returns card `index` from the deck"
    return self.cards.pop(index)

# %% ../nbs/02_deck.ipynb 19
class Hand(Deck):
    def __init__(self):
        super().__init__()
        self.cards.clear()

# %% ../nbs/02_deck.ipynb 21
def move_cards(source:Deck, # deck to move cards from
               dest:Hand, # destination to move cards to
               num:int): # number of cards to move
    "Pop the given number of cards from the deck and move to `dest`."
    for i in range(num): dest.add(source.pop())

# %% ../nbs/02_deck.ipynb 28
def draw_n(n:int, # number of cards to draw
           replace:bool=True): # whether or not draw with replacement
    "Draw `n` cards, with replacement iif `replace`"
    d = Deck()
    d.shuffle()
    if replace: return [d.cards[random.choice(range(len(d.cards)))] for _ in range(n)]
    else: return d.cards[:n]

# %% ../nbs/02_deck.ipynb 36
from pathlib import Path
from fastcore.script import call_parse

# %% ../nbs/02_deck.ipynb 37
@call_parse
def draw_cards(n:int, # number of cards to draw
               replace:bool=True, # whether or not draw with replacement
               outfile:str=None): # output file, defaults to stdout
    "Draw `n` cards optionally with replacement"
    cards = draw_n(n, replace=replace)
    strcards = '\n'.join(map(str, cards))
    print(strcards) if outfile is None else Path(outfile).write_text(strcards, encoding="utf8")
